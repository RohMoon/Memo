#[Spring Boot]
## Template Engine- ThymeLeaf
### 템플릿 엔진이란?
- 동적 컨텐츠를 생성하는 방법이다.<br><bR>
`view`만 만드는데 사용하는 것이 아니다. 여러 가지 용도 (`code generation`, `email` 등 )로 사용할 수 있지만,
주로 사용하는 기능이 `view`를 만드는 것이다.<br><bR>
- 기본적인 템플릿은 같지만, 거기 들어가는 값들만 경우에 따라 달라진다.<bR>
그래서 정적인 컨텐츠를 생성할 수 없고, 동적으로 컨텐츠를 생성해서 제공해줘야한다.

### Thymeleaf
- 스프링 부트가 자동 설정을 지원하는 템플릿 엔진이 4가지 있다.<bR><bR>
  - FreeMarker
  - Groovy
  - Thymeleaf
  - Mustache<br><br>
- 스프링 부트는 `JSP`를 권하지 않는데, `JAR` 패키징을 할 수 없고,(WAR 패키징)의존성 문제도 발생할 수 있기 때문이다.<br><br>
Thymeleaf는 비교적 최근에 만들어진 템플릿 엔진이다.<br><bR>
Thymeleaf를 사용하기 위해 `pom.xml`에 아래의 의존성을 추가해줘야 한다.<br><br>
```xml
 <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
```
기본적으로 자동 설정이 적용되고, 모든 동적으로 생성되는 `view`들은 `src`-`main`-`resources`- `template`에서 찾게 된다.<br><br>

### 예시
요청을 `"/hello"` 로 받고, 응답을 만드는 데 사용하는 모델은 `name`에 `sanmgmoon`이라는 값이 들어있고, 응답의 `view`이름이 `hello`인 `Test` 를 하나 만든다.<br><br>

```java
@RunWith(SpringRunner.class)
@WebMvcTest(SampleController.class)
public class SampleControllerTest{
    
    @Autowired
    MockMvc mockMvc;
    
    @Test
  public void hello() throws Exception{
        mockMvc.perform(get("/hello"))
                .andExpect(status().isOk())
                .andExpect(view().name("hello"))
                .andExpect(model().attribute("name",is("sangmoon")));
    }
}
```
- `Test`를 보면 `/hello`라는 요청을 받아와야하므로, `SampleController`에 `@GetMapping`으로 `/hello`를 받게 만들어 준다.<br><br>
```java
@Controller
public class SampleController {
    
    @GetMapping("/hello")
  public String hello(Model model){ // view의 이름 : hello / model 데이터를 받기 위해 model을 파라미터로 선택
        
        model.addAttribute("name","sangmoon");// hello라는 view에다가 전달해야할 데이터들은 Model에 담을 수 없다.
      
      return "hello"; //@RestController가 아닌 일반 Controller 이기 때문에 리턴 값은 응답의 본문이 아니다.
    }
}
```
`SampleController`의 어노테이션이 `@RestController`가 아닌  `@Controller`이기 때문에, 
`public String hello`의 리턴 값은 본문을 나타내지 않는다.<br><br>
`public String hello` 자체는 `view`를 의미한다.<br><br>
`view`에다 전달할 데이터는 `Model`에 담아줘서 전달해줄 수 있다.<br><br>
이제 `template`를 만들어준다.<br><br>
![img_80.png](img_80.png)<br><br>
그리고 테스트를 실행하면 테스트르를 패스함을 볼 수 있다.<br><br>
`model`을 통해 `view`로 데이터를 넘겨서 사용할 수 있다.<br><br>
`thymeleaf`문법을 사용하기 위해 `xmlns:th="http://www.thymeleaf.org"` 를 추가해준다.<br><br>
![img_81.png](img_81.png)<br><br>
실행시켜보면 `model`로 넘겨줬던 값을 제대로 받아옴을 볼 수 있다.<br><br>