# [SpringBoot]
## SpringWebMVC - HttpMessageConverters
###HttpMessageConverters
- 스프링 부트는 기본 설정에 의해, 기본적으로 웹 MVC를 바로 사용할 수 있다.(자동 설정 파일이 적용되었기 때문)<br><br>
- 스프링 프레임워크에서 제공하는 인터페이스이며 `srping MVC`의 일부분이다.<br><br> 
- HTTP 요청 본문을 객체로 변경하거나, 객체를 HTTP 응답 본문으로 변경할 때 사용한다.<br><br>
- `@RequestBody`/ `@ResponseBody`와 함께 사용된다.<br><br>
- 데이터가 요청으로 들어올 때 요청의 본문에 그 데이터가 들어있을 때, <br>
그걸 객체로 받고 싶으면 파라미터로 `@RequestBody` 를 붙여 객체로 받을 수 있다.(스프링이 알아서 `conversion`한다.)
```java
@PostMapping("/user")
public @ResponseBody User create(@RequestBody User user){
    return null;
        }
```
- 이렇게 하면 `HttpMessageConverter`가 사용이 된다.<br><br>
사용하는 `HttpMessageConverters`는 여러가지가 있고, <br>
그 중에서 어떤 요청을 받았는지 또는 어떤 응답을 보내야하는지에 따라 사용하는 `HttpMessageConverter`가 달라진다.<br><br>
예를 들어 요청이 `json` 요청이고, `json`본문이 들어온 경우<br>
(요청에는 `contents type`이라는 헤더가 있다. `contents type`도 `json`이고, 본문도`json`)<br>
`jsonMessageConverter`가 사용이 되어, `json`메세지를 `User`라는 객체로 컨버팅 해주는 것이다.<br><br>
`return`할 때, `User`라는 객체를 `return`할 것이다. `http`가 문자이므로, 객체 자체를 `response`로 내보낼 수는 없다.<br>
따라서 `HttpMessageConverters`를 사용하여 변환해야한다.<br><br>
컴포지션 타입(객체 안에 여러가지 프로퍼티를 가질 수 있는 타입)일 경우 기본적으로 `jsonMessageConverter`가 사용된다.<br><br>
컴포지션 타입이 아닌 일반 `String`객체나 `int`객체를 예로 들면<br>
`StringMessageConverter`가 사용된다. (`int`도 `toString`을 사용하여 문자열로 변환할 수 있기 때문)<br><br>
클래스에 `@RestController`가 붙어 있으면 `public` 뒤에 `@ResponseBody`를 생략할 수 있다.<br><br>
```java
@RestController
public class UserController{
    @GetMapping("/hello")
    public String hello(){
        return "hello";
    }
    
    @PostMapping("/user")
    public User create(@RequestBody User user){
        return null;
    }
}
```
- 일반 `@Controller`를 사용시 `@ResponseBody` 를 써줘야한다.<br><br>
```java
@Controller
public class UserController{
    
    @GetMapping("/hello")
    public @ResponseBody String hello(){
        return "hello";
    }
    @PostMapping("/user")
    public @Response User create(@ResponseBody User user){
        return null;
    }
    
}
```
### 예제
- 컴포지션 객체를 만들어 `HttpMessageConverters` 사용해보기
- User 를 생성하는 `Controller`를 만들어보겠다.
- 먼저 `Test`파일을 만든다.<br><br>
```java
@RunWith(springRunner.class)
@WebMvcTest(UserController.class)
public class UserControllerTest{
    
    @Autowired
    MockMvc mockMvc ; //@WebMvcTest를 사용하면 자동으로 Bean으로 등록됨.
    
    @Test
    public void createUser_JSON() throws Exception{
        String userJson = "{\"username\": \"sangmoon\", \"password\":\"1234\"}";
        
        mockMvc.perform(post("/users/create") //요청을 만드는 단계
                .contentType(MediaType.APPLICATION_JSON.UTF8)
                .accecpt(MediaType.APPLICATION_JSON_UTF8)
                .content(userJson))
                //응답을 확인하는 단계
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username",is(equalTo("sangMoon"))))
                .andExpect(jsonPath("$.password",is(equalTo("1234"))));
    }
}
```
- `@Test`코드
```java
@RunWith(SpringRunner.class)
@WebMvcTest(UserController.class)
public class UserControllerTest{
    
    @Autowired
    MockmMvc mockmMvc; //@WebMvcTest 를 사용하면 자동으로 bean으로 등록됨.
    
    @Test
    public void createUser_JSON() throws Exception{
        String userJson = "{\"username\" : \"sangMoon\",\"password\":\"1234\"}";
        
        mockmMvc.perform(post("/users/create") // 요청을 만드는 단계
                .contentType(MediaType.APPLICATION_JSON_UTF8)
                .accept(MediaType.APPLICATION_JSON_UTF8)
                .content(userJson))
                //응답을 확인하는 단계
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username",is(equalTo("sangMoon"))))
                .andExepct(jsonPath("$.password".is(equalTo("1234"))));
    }
}
```
`User`객체를 만들어준다. `getter / setter`가 있어야 한다. (자바 `Bean`규약에 의해)

```java
public class User {

    private Long id;
    private String username;
    private String password;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
```

#### User 객체 코드

```java
public class User {
    private Long id;
    private String username;
    private String password;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }
}
```
`/users/create` 요청을 처리하는 `handler`를 만들어준다.
```java
import org.springframework.web.bind.annotatiotion.*;
@RestController
public class UserController{
    
    @PostMapping("/users/create")
    public User create(@RequestBody User user){
    return user;
    }
}
```
그리고 테스를 실행해보면 정상작동하는 것을 확인할 수 있다.