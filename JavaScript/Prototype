# Object prototypes

javaScript에서는 객체를 상속하기 위하여 프로토타입이라는 방식을 사용한다.  
프로토타입 체인이 동작하는 방식을 설명하고 이미 존재하는 생성자에 메소드를 추가히기 위해 프로토타입 속성을 사용하는 법을 확인한다.

## 프로토타입 기반 언어??
JavaScript는 흔히 ___프로토타입 기반 언어(prototype-based language)___ 라 불린다.  
모든 객체들이 메소드와 속성들을 상속 받기 위한 템플릿으써 ___프로토타입 객체(prototype object)___ 를 가진다는 의미이다.  
프로토타입 객체도 또 다시 상위 프로토 타입 객체로부터 메소드와 속성을 상속 받을 수도 있고 그 상위 프로토타입 객체도 마찬가지이다.  
이를 ___프로토타입 체인(prototype chain)___ 이라 부르며 다른 객체에 정의된 메소드와 속성을 한 객체에서 사용할 수 있도록 하는 근간이다.  
  
정확히는 상속되는 속성과 메소드들은 각 개체가 아니라 객체의 생성자의 `prototype`이라는 속성에 정의되어 있다.
JavaScript 에서는 객체 인스턴스와 프로토타입 간에 연결(많은 브라우저들이 생성자의 `prototype`속성에서 파생된 `__proto__`속성으로 객체 인스턴스에 구현하고 있다.)이 구성되며 이 연결을 따라 프로토타입 체인을 타고 올라가며 속성과 메소드를 탐색한다.
> Note: 객체의 prototype(Object.getPrototypeOf(obj)) 함수 또는 `deprecated`된 `__proto__` 속성으로 접근 가능한과 생성자의 `prototype `속성의 차이를 인지하는 것이 중요하다.
> 전자는 개별 객체의 속성이며 후자는 생성자의 속성이다.
> 이 말은 Object.getPrototypeOf(new Foobar()) 의 반환값이 `Foobar.prototype`과 동일한 객체라는 의미입니다.

자세히 알기 위해 예제를 하나 보자. 

## 프로토타입 객체 이해하기
`Person()`생성자를 작성했던 예제 코드로 되돌아가 보자.  
```javascript
function Person(first, last, age, gender, interests) {
    //속성과 메소드 정의
    this.first = first;
    this.last = last;
    //...
}
```
// 인스턴스도 하나 만든다.
```javascript
let person1 = new Person('Bob','Smith',32,'male',['music','skiing']);
```
![img_2.png](img_2.png)
위 그림을 보면 `person1`의 프로토타입 객체인 `Person()`에 정의된 멤버들 __`name`, `age`,`gender`,`interests`,`bio`,`greeting` 을 볼 수 있습니다. 또한 `watch`, `valueOf`처럼 `Person()`의 프로토타입 객체인 `Object`에 정의된 다른 멤버들도 볼수 있는데,
이것이 프로토타입 체인이 동작한다는 증거이다.  
___person1 => "Inherits from prototype" => Person => "Inherits from prototype" => Object___  
그럼 실제로는 `Object`에 정의되어 있는 메소드를 `person1`에서 호출하면 어떻게 될까?
```javascript
person1.valueOf()
```
이 메소드는 호출된 객체의 값을 단순 반환한다.
- 브라우저는 우선 `person1` 객체가 `valueOf()`메소드를 가지고 있는지 체크한다.
- 없으므로 `person1`의 프로토타입 객체 (Person() 생성자의 프로토타입)에 `valueOf()`메소드가 있는지 체크한다.
- 여전히 없으므로 `Person()` 생성자의 프로토타입 객체의 프로토타입 객체(`Object()`)생성자의 프로토타입이 `valueOf` 메소드를 가지고 있는지 체크합니다. 
> ! 주의
> 프로토타입 체인에서 한 객체의 메소드와 속성들이 다른 객체로 ___복사되는 것이 아님___ 을 재차 다시 생각해야한다.
> 위에서 보시다 시피 체인을 타고 올라가며 접근할 뿐이다.
> 특정 객체의 프로토타입 객체에 바로 접근하는 공식적인 방법은 없다. --JavaScript 언어 표준 스펙에서 `[[prototype]]`으로 표현되는 프로토타입 객체에 대한 "링크"는 내부 속성으로 정의되어 있다.
> 하지만 많은 모던 브라우저들이 `__proto__` (앞자리로 언더바 2개씩) 속성을 통해 특정 객체의 프로토타입 객체에 접근할 수 있도록 구현되어있다. 
> 예를 들어 `person1.__proto__` 또는 `person1.__proto__.__proto__`코드로 체인이 어떻게 구성되어 있는지 확인해볼 수 있다.
> ECMAScript 2015부터는 `Object.getPrototypeof(obj)` 함수를 통해 객체의 프로토타입 객체에 ___바로 접근할 수 있게___ 되었다.

## 프로토타입 속성 : 상속 받은 멤버들이 정의된 곳
그럼 상속 받은 속성과 메소드들은 어디에 정의되어 있을까요 ? `Object`레퍼런스 페이지에 가시면 좌측에 수 많은 속성과 메소드들이 나열되어 있는 것을 볼 수 있다. __ 위 스크린샷에서 `person1`가 상속받은 멤버들보다 훨씬 많다. 일부는 상속되지만 나머지는 아니다 . __ 왜 그런것인가?  
  
이유는 상속 받는 멤버들은 `prototype` 속성(sub-namespace)에 정의되기 때문이다.  
`Object.`로 시작하는게 아니라, `Object.prototype.`으로 시작하는 것들이다. `prototype` 속성도 하나의 객체이고 프로토타입 체인을 통해 상속하고자 하는 속성과 메소드를 담아두는 버킷으로 사용되는 객체이다.

그르므로 `Object.prototype.watch()`,`Object.prototype.valueOf()`등등은 생성자를 통해 새로 생성되는 인스턴스는 물론 `Object.prototpye`을 상속 받는 객체라면 어떤 객체에서든 접근할 수 있다. 

`Object.is()`,`Object.keys()`등 `prototype` 버킷에 정의되지 않은 멤버들은 상속되지 않는다. 이것들은 `Object()`생성자에서만 사용할 수 있는 멤버들이다.

  1. `prototype` 속성을 직접 확인해 볼 수 있다.
  ```javascript
    Person.prototype
  ```
  2. 출력되는 것이 별로 많지 않을 것이다. 아직 이 커스텀 생성자 프로토타입에 아무것도 정의하지 않았다.
```javascript
    Object.prototype
```
위의 예제에서 확인했듯이 `Object`를 상속받은 객체에서 사용 가능한 수 많은 메소드들이 `Object`의 `prototype`속성에 정의되어 있음을 알 수 있다.

javaScript 전반에 걸쳐 프로토타입 체인 상속이 어떻게 구성되어 있는지 확인할 수 있다. __ 전역 객체인 `String`,`Date`, `Number`, `Array`의 프로토타입에 정의된 메소드와 속성들을 체크해보면,  
이 `prototype`객체 객체들에는 이미 많은 수의 메소드가 정의되어 있으며 이는 아래처럼 문자열 객체를 생성했을 때 
```javascript
let myString = 'this is my string';
```
`myString` 인스턴스가 생성되는 즉시 `split()`, `indexOf()`, `replace()`등의 문자열을 위한 유용한 메소드들을 사용할 수 있는 이유이다.
> 중요! 
> `prototype` 속성은 javascript 에서 가장 헷갈리는 명칭중 하나이다. 
> 보통 `this`가 현재 객체의 프로토타입 객체를 가리킬 것이라 오해하지만 그렇지 않다.
> (프로토 타입 객체는 __proto__ 속성으로 )접근 가능한 내장 객체인 것 기억하는가? 대신에 `prototype` 속성은 상속 시키려는 멤버들이 정의된 객체를 가리킨다.
> 대신에 `prototype` 속성은 상속 시키려는 멤버들이 정의된 객체를 가리킨다.

### Create 다시보기
이전에 새 인스턴스를 생성시키기 위해서 `Object.create()` 메소드를 사용하는 법을 알아 보았습니다.
1. 예를 들어서 이전 예제에서 아래 코드를 javaScript console에서 실행했었다면:
```javascript
let person2 = Object.create(person1);
```
2. `create()`메소드가 실제로 하는 일은 주어진 객체를 프로토타입 객체로 삼아 새로운 객체를 생성한다. `person2`는 `person1`을 프로토타입 객체로 삼는다. 아래 코드를 실행하여 이를 확인 할 수 있다.
```javascript
person2.__proto__
```

### 생성자 속성
모든 생성자 함수는 `constructor` 속성을 지닌 객체를 프로토타입 객체로 가지고 있다.
이 `constructor` 속성은 원본 생성자 함수 자신을 가리키고 있다.
다음장에서 볼듯이 `Person.prototype`속성 (또는 위 절에서 언급된 아무 생성자 함수의 `prototype`속성)에 정의된 속성들은 `Person()`생성자로 생성된 모든 인스턴스에서 사용할 수 있다.
그러므로 `person1`과 `person2`에서도 `constructor` 속성에 접근할 수 있다.
```javascript
person1.constructor
person2.constructor
```
도 구문 모두 Person() 생성자 함수를 반환하게 된다.

`constructor`속성에 괄호를 붙이고 실행하여 (인자가 필요하면 전달하도록한다.) 새 인스턴스를 생성하는 트릭이 있다.  
어쨋든 생성자도 함수의 일종이므로 괄호를 붙이면 실행할 수 있다. `new` 키워드를 통해 실행하면 함수를 인스턴스를 생성하기 위핸 생성자로 사용할 수 있다.
```javascript
let person3 = new person1.constructor('Karen','Stephenson',26,'female', ['playing drums','mountain climbing']);
```
이는 동작하게 된다.
이런 방식을 자주 사용할 필요는 없지만 실행 도중 명시적인 생성자 함수를 예측할 수 없는 상황에서 인스턴스르 생성해야 하거나 하는 경우 유용하게 사용할 수 있는 방법이다.

`constructor`속성은 여러 방법이 있다. 예를 들면 인스턴스 생성자 이름이 필요한 경우 아래의 코드로 알아낼 수 있다.
```javascript
instanceName.constructor.name;
```
```javascript
person1.constructor.name
```
> `constructor.name`는 변경이 가능하므로 (상속이나 바인딩, 전처리, 트랜스파일러 등에 의해)복잡한 로직에 적용하기 위해서는 `instanceof'연산자를 사용할수도 있다고 한다.

### 프로토타입 수정하기
생성자의 `prototype` 속성을 수정하는 법에 대해 알아보자. ( 프로토 타입에 메소드를 추가하면 해당 생성자로 생성된 모든 객체에서 사용가능하다.)
1. 아래처럼 `prototype`속성에 새메소드를 추가할 수 있다.
```javascript
Person.prototype.farewell = function () {
    alert(this.name.first + 'has left the building. Bye for now!');
};
```
```javascript
person1.farewell();
```
생성자에서 지정했던 `person`의 `name`이 `alert`창으로 출력되는 것을 확인할 수 있다. 매우 유용한 기능이지만 중요한 점은 `prototype`에 새 메소드를 추가하는 순간 동일한 생성자로 생성된 모든 객체에서 추가된 메소드를 바로 사용할 수 있다는 점이다.

잠시 정리해 보자, 예제에서는 생성자를 정의하고, 객체를 생성하였으며, 그 이후에 프로토타입에 새 메소드를 추가하였습니다.
```javascript
function Person(first,last,age,gender,interests) {
    //속성과 메소드 정의
}
let person1 = new Person('Tammi','Smith',32,'netural',['music','skiing','kickboxing']);

Person.prototype.farewell = function () {
    alert((this.name.first + 'has left the building. byr for now'));
};
```
그런데도 `person1` 에서 바로 `farewell()`메소드를 사용할 수 있다.
자동으로 업데이트 되기 때문이다. (실제로는 프로토타입 객체는 모든 인스턴스에서 공유하기 때문에 정의하는 즉시 별도의 갱신과정 없이 접근이 가능하다.)

`prototype`에 속성을 정의하는 경우는 별로 본적이 없을것인데, 이는 별로 좋은 방법이 아니기 때문이다. 속성을 추가할때 아래와 같이 할 수 있다.
```javascript
Person.prototype.fullName = 'Bob Smith';
```
사람들이 항상 밥스미스로 불리지 않으니 좋은 방법은 아니다.
`fullname`을 `name.first`와 `name.last`로 나누어보자.
```javascript
Person.prototype.fullName = this.name.first + ' ' + this.name.last;
```
이 경우 `this`는 함수 범위가 아닌 전역 범위를 가리키므로 코드가 의도대로 동작하지 않는다. 
이대로 실행해도 `undefined`만 볼수 있다. 윗 절에서 프로토타입에 정의한 메소드 내에서는 정상적으로 동작하지만, 이는 코드가 함수 범위내에 있으며 객체의 멤버 함수로써 동작하기에 객체 범위로 전환되었기 때문이다 .
따라서 프로토타입에 상수(한 번 할당하면 변하지 않는 값)을 정의하는 것은 가능하지만 일반적으로 생성자에서 정의하는 것이 낫다.  
  
사실 일반적인 방식으로는 속성은 생성자에서, 메소드는 프로토타입에서 정의한다. 생성자에는 속성에 대한 정의만 있으면 메소드는 별도의 블럭으로 구분할 수 있으니 코드를 읽기가 훨씬 쉬워진다. 
```javascript
//생성자에서 속성 정의
function Test(a,b,c,d) {
    //속성 정의
}
//첫 메소드 정의
Test.prototype.x = function () {
    ...
};
Test.prototype.y= function () {
    ...
}
// 그 외
```