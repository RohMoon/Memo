# Object prototypes

javaScript에서는 객체를 상속하기 위하여 프로토타입이라는 방식을 사용한다.  
프로토타입 체인이 동작하는 방식을 설명하고 이미 존재하는 생성자에 메소드를 추가히기 위해 프로토타입 속성을 사용하는 법을 확인한다.

## 프로토타입 기반 언어??
JavaScript는 흔히 ___프로토타입 기반 언어(prototype-based language)___ 라 불린다.  
모든 객체들이 메소드와 속성들을 상속 받기 위한 템플릿으써 ___프로토타입 객체(prototype object)___ 를 가진다는 의미이다.  
프로토타입 객체도 또 다시 상위 프로토 타입 객체로부터 메소드와 속성을 상속 받을 수도 있고 그 상위 프로토타입 객체도 마찬가지이다.  
이를 ___프로토타입 체인(prototype chain)___ 이라 부르며 다른 객체에 정의된 메소드와 속성을 한 객체에서 사용할 수 있도록 하는 근간이다.  
  
정확히는 상속되는 속성과 메소드들은 각 개체가 아니라 객체의 생성자의 `prototype`이라는 속성에 정의되어 있다.
JavaScript 에서는 객체 인스턴스와 프로토타입 간에 연결(많은 브라우저들이 생성자의 `prototype`속성에서 파생된 `__proto__`속성으로 객체 인스턴스에 구현하고 있다.)이 구성되며 이 연결을 따라 프로토타입 체인을 타고 올라가며 속성과 메소드를 탐색한다.
> Note: 객체의 prototype(Object.getPrototypeOf(obj)) 함수 또는 `deprecated`된 `__proto__` 속성으로 접근 가능한과 생성자의 `prototype `속성의 차이를 인지하는 것이 중요하다.
> 전자는 개별 객체의 속성이며 후자는 생성자의 속성이다.
> 이 말은 Object.getPrototypeOf(new Foobar()) 의 반환값이 `Foobar.prototype`과 동일한 객체라는 의미입니다.

자세히 알기 위해 예제를 하나 보자. 

## 프로토타입 객체 이해하기
`Person()`생성자를 작성했던 예제 코드로 되돌아가 보자.  
```javascript
function Person() {
    
}
```