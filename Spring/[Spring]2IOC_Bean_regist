#[Spring]
## IOC (Inversion Of Control) Bean 등록 해보기

### XML 파일로 Bean 등록해보기
- 먼저 src- main - java 하위에 `Car`라는 패키지를 만들고, `Car`안에 `main`과 `CarRepository`와 `CarService`를 생성.
- ![img_6.png](img_6.png)<br>
- carService는 setter를 통해 CarRepository를 주입받아 사용한다고 가정한다.
```java
package Car;

public class CarMain {

    public static void main(String[] args) {

    }
}

```
```java
package Car;

public class CarService {

    CarRepository carRepository;

    public void setCarRepository(CarRepository carRepository){
        this.carRepository = carRepository;
    }

}

```
```java
package Car;

public class CarRepository {

}
```
### 스프링 Bean 설정파일 만들기
- `src` - `main` - `resources` 를 우클릭하여, `Spring Config` 파일을 마든다. 이름은 `application.xml`로 만든다.
- ![img_7.png](img_7.png)
아래는 xml bean 설정 파일이 될 application.xml의 설정이다.

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

</beans>
```
안에 태그를 사용하여 `bean`을 정희해 줄 수 있따. 아까 만들어 둔, `CarService`와 `CarRepository`를 `Bean`으로 등록해준다.

id,class ,scope를 비롯한 다양한 설정을 줄 수 있다. 기본적인 `Bean` 정의는 아래와 같다. 

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <bean id="carService"
          class="Car.CarService"/>
    <bean id="carRepository"
          class="Car.CarRepository"/>

</beans>
```
그러나 이렇게만 하는 경우, 아까 만들어 준,`CarService` 는 `CarRepository`를 주입받아야 하지만, 주입 받지 못한다.<br>
주입을 해주기 위해 값을 설정해줘서 `reference`로 주입해줘야 한다.

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="carService"
          class="Car.CarService">
        <property name="carRepository" ref="carRepository"/>
    </bean>

    <bean id="carRepository"
          class="Car.CarRepository"/>

</beans>
```
`property`의 `name` 값은 아까 만들어 준, `CarService`의 `setter`에서 가져온 것이다.

```java
package Car;

public class CarService {

    CarRepository carRepository;

    public void setCarRepository(CarRepository carRepository){ // <<<<<<<<<<<<<<<<
        this.carRepository = carRepository;
    }

}

```
- `ref`값도 `name`값과 동일하지만, `ref`의 값은 다른 `bean`의 `id`를 통해 참조한다는 뜻이다. 
- ![img_8.png](img_8.png)
- 지금 `CarService`의 `setter`가 `CarRepository`를 받아오므로, `CarRepository Bean`을 `ref`로 참조하여 주입할 수 있는 것이다.<bR><br>
### 만들어준 Bean 설정 파일 사용하기
- 위에서 만들었던 `Bean` 파일들을 사용하기 위해 `main`에서 `ApplicationContext`를 사용해보겠다.<br><br>
- `ApplicationContext`를 아까 만들어준 `xml` 설정파일(`application.xml`)을 넣어 `CalssPathXmlApplicationContext`로 선언해준다.<br><br>
그 후, `xml`설정 파일에 정의 된 `bean`들을 읽어 `String` 배열에 담고 출력해보면 아래와 같이 나온다.
![img_9.png](img_9.png)<br><br>
- `CarService`는 `xml`설정파일에 의해, `CarRepository`를 의존성을 주입받은 것이기 때문에,`application.xml`에서 id 값으로 정의된 `bean`을 가져와 재대로 의존성 주입이 되었는지 확인해볼 수 있다.
- ![img_10.png](img_10.png)
- `carService` 값이 `null`이 아니므로 의존성 주입이 제대로 된 것을 볼 수 있다.<br><br>

`<context:component-scan base-package="">`<br><br>
그러나, 위의 방법은 잘 쓰이지 않는다. 하나한 `xml`파일에 `Bean`으로 등록하는 것이 번거롭기 때문이다.<br><br>
그래서 쓰는 것이 `<context:component-scan base-package="">`이다. <br>
`base-package`에 적어준 `package`부터 하위까지 모드 스캔하여 `Bean`을 등록해주는 것이다.<br> 
![img_11.png](img_11.png)<br><br>
(`src` -`main` - `java` - `com` - ` basic` - `car` 패키지부터 하위 모든 패키지를 스캔)
- 기본적으로 `@Component annotation`을 사용하여 `Bean`으로 등록할 수 있다. `@Service`와 `@Repository`는 `@Component`를 확장한 것이기 때문에 마찬가지의 효과를 볼 수 있다.<br>
```java
package com.basic.car;

import org.springframework.stereotype.Repository;

@Repository
public class CarRepository {

}
```
```java
package com.basic.car;

public class CarService {

    CarRepository carRepository;

    public void setCarRepository(CarRepository carRepository){
        this.carRepository = carRepository;
    }
}
```
- `@Service` , `@Repository` 'annotation'을 붙여주면 'bean'으로는 등록 되지만, 의존성이 주입된 것은 아니다.<br>
- 의존성 주입은 `@Autowired` 라는 'annotation'을 사용해서 받을 수 있다.
- 
```java
package com.basic.car;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CarService {
    @Autowired // <<
    CarRepository carRepository;

    public void setCarRepository(CarRepository carRepository){
        this.carRepository = carRepository;
    }

}
```
아래처럼 main 실행시켜보면 , `bean`을 제대로 읽어옴을 볼 수 있다.
![img_12.png](img_12.png)
<br><br>
### JAVA로 Bean 등록해보기
Bean 설정 파일을 xml이 아닌, 자바로도 만들 수 있다.  (`@Service`,`@Repository` 등의 'annotation'을 사용하지 않는다.)<br>
`@Configuration` 'annotation'을 사용한다.<br><br>
먼저, car패키지에 `ApplicationConfig`라는 클래스를 만들어주고, `@Configuration`을 붙여준다.<br>
![img_13.png](img_13.png)<br><br>
그 다음 `@Bean` 'annotation'을 이용하여, `bean`을 정의해준다.
노란색으로 적힌 부분이 아까 `xml`파일로 보면 `bean`의 `id`값이고, `return`이 되는 값이 실제 객체이다.<br><br>
![img_14.png](img_14.png)
```java
package com.basic.car;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfig{

    @Bean
    public CarRepository carRepository(){
        return new CarRepository();
    }

    @Bean
    public CarService carService(){
        return new CarService();
    }
}
```
이 중에서 `CarService`는 의존성 주입을 받아야 하므로 아래와 같이 바꿔준다.
의존성 주입은 세가지 방법이 있다.
1 . 메서드 이름으로 주입하는 방법.
2. 두번째는 파라미터로 받아 주입해주는 방법.
3. `@Autowired`를 쓰는 방법이 있다.
-------------------------------------------
(첫번째 , 두번째 방법)

```java
package com.basic.car;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfig{

    @Bean
    public CarRepository carRepository(){ // bean의 id 값이 메서드의 이름.
        return new CarRepository(); // 실제 객체
    }

    @Bean
    public CarService carService(){
        CarService carService = new CarService();
        carService.setCarRepository(carRepository()); // 의존성 주입
        return carService;
    }

    @Bean
    public CarService carService (CarRepository carRepository){ //파라미터로 받음.
        CarService carService = new CarService();
        carService.setCarRepository(carRepository); // 의존성 주입
        return carService;
    }


}
```
![img_15.png](img_15.png)
(세번째 주는 방법) 이 경우는 `setter`이기 때문에 가능, 생성자인 경우는 `@Autowired`로 할 수 없다.<br>
![img_16.png](img_16.png)
```java
package com.basic.car;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfig{

    @Bean
    public CarRepository carRepository(){ // bean의 id 값이 메서드의 이름.
        return new CarRepository(); // 실제 객체
    }

    @Bean
    public CarService carService(){ // bean 의 id 값이 메서드의 이름,
        return new CarService(); // 실제 객체
    }
}
```
![img_17.png](img_17.png)<br><br>
// 이것을 메인에서 실행해보기 위해서는 `ClassPathXmlApplicationContext `를 사용하여 아까만들어둔 `ApplicationConfig`로 선언해준다.
```java
package com.basic.car;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.Arrays;

public class CarMain {

    public static void main(String[] args) {

        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(ApplicationConfig.class);
//        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("application.xml");
        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();
        System.out.println(Arrays.toString(beanDefinitionNames));

        CarService carService = (CarService) applicationContext.getBean("carService");//<<
        System.out.println(carService != null);//<<
    }
}
```
실행시켜보면 작동하고 있다는 것을 알 수 있다.<br><br>
![img_18.png](img_18.png)
-------

### @ComponentScan(basePackageClasses = )
그러나 이 경우도, 첫 번째 경우와 같이 하나하나 `Bean`을 등록해주어야 한다.<br><br>
`@ComponentScan(basePackageClasses = )`를 사용하여 `<context:component-scan base-package="">`를 사용하는 것과 같은 효과를 낼 수 있다.<br><br>

`basePackageClasses`에 특정 클래스를 적어주면, 해당 클래스가 위치한 곳부터 `@Service`, `@Repository` 등 특정 `annotation`을 스캔하여 클래스들을 `Bean`으로 등록시켜준다.<br><br>
```java
package com.basic.car;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackageClasses = CarMain.class) //<<<
public class ApplicationConfig{

    @Bean
    public CarRepository carRepository(){ // bean의 id 값이 메서드의 이름.
        return new CarRepository(); // 실제 객체
    }

    @Bean
    public CarService carService(){ // bean 의 id 값이 메서드의 이름,
        return new CarService(); // 실제 객체
    }
}
```
-------
CarRepository
```java
package com.basic.car;

import org.springframework.stereotype.Repository;

@Repository// << 
public class CarRepository {

}
```
-------------
CarService
```java
package com.basic.car;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service // << 
public class CarService {
    @Autowired//<<
    CarRepository carRepository;

    public void setCarRepository(CarRepository carRepository){
        this.carRepository = carRepository;
    }
}
```
