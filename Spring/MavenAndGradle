# Maven과 Gradle

## Maven 이란?
- 프로젝트를 진행하게 되면 단순히 자신의 코드만 가지고 개발하는것이 아닌 많은 라이브러리들을 활용해서 개발하게 된다.
이 때 사용되는 라이브러리들의 수가 수십개가 훌쩍 넘어버리는 일이 발생해 이 많은 라이브러리들을 관리하는 것이 힘들어지는경우가 종종 발생하곤 한다. <br>
Maven은 이러한 문제를 해결해 줄 수 있는 도구이다. <br>
Maven은 내가 사용할 라이브러리 뿐만 아니라 해당 라이브러리가 작동하는데 필요한 다른 라이브러리들까지 관리하여 네트워크를 통해 자동으로 다운 받아 준다.<br><br>
Maven은 프로젝트의 전체적인 라이프 사이클을 관리하는 도구이며, 많은 편리함과 이점이 있어서 널리 사용되고 있다.<BR>
기존에는 Ant가 많이 사용되었지만 Maven이 Ant를 넘어서 더 많은 개발자들이 사용하게 되었고 비교적 최근에는 Gradle이 새롭게 나와 사용되고 있다.<br>
Maven은 JDK와 같이 설치가 가능하다. 환경변수 잡아주고 하면 cmd에서 vmn --version을 통해 버전을 알 수 있고 설치가 가능하다. 설치는 메이븐 홈페이지에서 가능하다.

###Maven의 LifeCycle
- maven 에서는 미리 정의하고 있는 빌드 순서가 있으며 이 순서를 라이프 사이클이라고 한다.<br>
라이프 사이클의 빌드 단계를 Phase라고 하는데, 이런 Phase들은 의존 관계를 가지고 있다.<br><br>
  - Clean : 이전 빌드에서 생성된 파일들을 삭제하는 단계.
  - Validate : 프로젝트가 올바른지 확인하고 필요한 모든 정보를 사용할 수 있는지 확인하는 단계.
  - Compile : 프로젝트의 소스코드를 컴파일 하는 단계.
  - Test : 유닛 (단위) 테스트를 수행하는 단계(테스트 실패시 빌드 실패로 처리, 스킵 가능)
  - Package : 실제 컴파일된 소스 코드와 리소스들을 jar등의 배포로 위한 패키지로 만드는 단계
  - Verify : 통합테스트 결과에 대한 검사를 실행하여 품질 기준을 충족하는지 확인하는 단계
  - Install : 패키지를 로컬 저장소에 설치하는 단계
  - Site : 프로젝트 문서를 생성하는 단계
  - Deploy : 만들어진 Package를 원격 저장소에 release하는 단계
- 위의 라이프 사이클 말고도 더 많은 종류의 라이프 사이클이 존재한다. 이를 크게 `Clean`,`Build`, `Site`세가지 라이프 사이클로 나누고 있다. <br>
각 단계를 모두 수행하는 것이 아니라 원하는 단계까지만 수행할 수도 있으면 `test`단계는 큰 프로젝트의 경우에 몇 시간이 소요될 수 있으니 수행하지 않도록 스킵이 가능하다.<br><br>

- Phase와 Goal
  - 위에서 잠깐 언급했던 `Phase`는 `Maven`의 `Build LifeCycle`의 각각의 단계를 의미한다. 각각의 `Phase`는 의존 관계를 가지고 있어서 해당 `Phase`가 수행 되려면 이전 단계의 `Phase`가 모두 수행되어야 한다.<br><br>
  - 메이븐에서 제공되는 모든 기능은 플러그인 기반으로 동작하는데 메이븐은 라이프사이클에 포함되어 있지 않는 `Phase`마저도 플러그인을 통해 실질적인 작업이 수행된다. 
  - 즉 각각의 `Phase` 는 어떤 일을 할지 정의하는 어떤 플러그인의 `Goal`을 실행할지 설정한다.
  - 메이븐에서는 하나의 플러그인에서 여러작업을 수행할 수 있도록 지원하며, 플러그인에서 실행할 수 있는 각각의 기능을 `goal`이라고 한다. 플러그인의 `goal`을 실행하는 방법은 다음과 같다.
    - -mvn groupid: artifactid:version:goal (아래와 같이 같이 생략 가능)
    - -mvn plugin:goal
- POM - Project Object Model
  - pom은 Project Object Model의 약자로 이름 그대로 Projet Object Model의 정보를 담고 있는 파일이다.
  이파 일에서 주요하게 다루는 기능들은 다음과 같다.
    - 프로젝트 정보 : 프로젝트의 이름, 개발자 목록, 라이센스 등
    - 빌드 설정 : 소스, 리소스, 라이프 사이클별 실행한 플러그인(goal)등 빌드와 관련된 설정
    - 빌드 환경 : 사용자 환경 별로 달라질 수 있는 프로파일 정보
    - POM 연관 정보 : 의존 프로젝트(모듈), 상위 프로젝트, 포함하고 있는 하위 모듈 등
  - POM은 pom.xml 파일을 말하며 `Maven`의 기능을 이용하기 위해 POM이 사용된다. 
<br><br>
### Gradle
  - 지금까지 `Maven`을 알아보았다. 다음은 Gradle에 대해 알아볼 차례이다.
  - Gradle이란 기본적으로 빌드 배포 도구 (Build Tool)이다. 안드로이드 앱을 만들 때 필요한 공식 빌드 시스템이기도 하며 JAVA, C/C++, Python 등을 지원한다.
  - 빌드 툴인 Ant Builder와 그루비 스크립트를 기반으로 구축되어 기존 Ant의 역할과 배포 스크립트의 기능을 모두 사용 가능하다.
  - 기본 메이븐의 경우 XML로 라이브러리를 정의하고 활용 하도록 되어 있으나, Gradle의 경우 별도의 빌드스크립트를 통하여 사용할 어플리케이션 버젼, 라이브러리 등의 항목을 설정 할 수 있다.
  - 장점으로는 스크립트 언어로 구성어되어 있기 때문에, XML 과 달리 변수선언, if, else, for 등의 로직이 구현가능하여 간결하게 구성 가능하다.
    - 리이브러리 관리 : 메이븐 레파지토리를 동일하게 사용할 수 있어서 설정된 서버를 통하여 라이브러리를 다운로드 받아 모두 동일한 의존성을 가진 환경을 수정할 수 있다.<bR>
    자신이 추가한 라이브러리도 레파지토리 서버에 올릴 수 있다.
    - 프로젝트 관리 : 모든 프로젝트가 일관된 디렉토리 구조를 가지고 빌드 프로세스를 유지하도록 도와준다.
    - 단위 테스트 시 의존성 관리 : junit 등을 사용하기 위해서 명시한다.

## Gradle과 Maven 의 장단점
- Maven에는 Gradle과의 비교 문서가 없지만, Gradle에는 비교문서가 있다.
- Gradle이 시기적으로 늦게 나온만큼 상용성, 성능 등 비교적 뛰어난 스펙을 가지고 있다.
###Gradle이 Maven보다 좋은 점
- Build라는 동적인 요소를 XML로 정의하기에는 어려운 부분이 많다.
  - 설정 내용이 길어지고 가독성이 떨어진다.
  - 의존관계가 복잡한 프로젝트를 설정하기에는 부적절하다.
  - 상속구조를 이용한 멀티 모듈 구현
  - 특정 설정을 소수의 모듈에서 공유하기 위해서는 부모 프로젝트를 생성하여 상속하게 해야함.(상속의 단점 생김)
- Gradle은 그루비를 사용하기 때문에, 동적인 빌드는 Groovy 스크립트로 플러그인을 호출하거나 직접 코드를 짜면 된다.
  - Configuration Injection 방식을 사용해서 공통 모듈을 상속해서 사용하는 단점을 커버했다.
  - 설정 주입시 프로젝트의 조건을 체크할 수 있어서 프로젝트 별로 주입되는 설정을 다르게 할 수 있다.
  > `Gradle`이 `Maven`보다 최대 100배 빠르다.
## 결론
- 지금 시점에서 Gradle을 사용하지 않을 이유는 익숙함 뿐이다.
- Gradle이 출시 되었을 때는 Maven이 지원하는 Scope를 지원하지 않았고, 성능면에서도 앞설 것이 없었지만,<br>
ANt의 유여한 구조적 장점과 Maven의 편리한 의존성 관리 기능을 합쳐놓은 것만으로도 많은 인기를 얻었던 `Gradle`은 버전이 올라가며 성능이라는 장점까지 더해지며 대세가 되었다.
- 그동안 사용했던 `Maven`과 이제는 익숙해지는 `XML`을 버리고 `Gradle`과 `Groovy`문법을 배우는 것은 적지 않은 비용이 든다.<bR>
특히, 협업을 하는 경우 프로젝트 구성과 빌드만을 위해 모든 팀원이 `Groovy` 문법을 익혀야 한다는 사실이 `Gradle`을 사용하는데 큰 걸림돌일 뿐이다.<br>
그러한 탓인지 여전히 `Maven`의 사용률은 `Gradle`을 앞서고 있으며, 구글 트렌드 지수도 `Maven`이 `Gradle`을 앞선다.
- 협업과 러닝커브를 고려하여 여전히 `Maven`을 사용하는 팀이 많고 부족함 없이 잘 사용하고 있지만, 빌드타임 비용 문제로 `Gradle`을 사용해야 할 것 같다.<bR>
왜냐하면 `Gradle`이 `Maven`보다 최대 100배 빠르기 때문이다.<br><br>

리드미컬하게 테스트를 진행하고 민첩한 지속적 배포를 생각하고 있다면 새로운 배움이 필요하더라도 `Gradle`을 사용해보자.