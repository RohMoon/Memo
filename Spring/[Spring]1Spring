#[Spring]
##Spring 이란?

### Spring이란?
- 소규모 어플리케이션 또는 기업용 어플리케이션을 자바로 개발하는데 있어 유용하고 편리한 기능을 제공하는 프레임워크<br><br>
- DI,AOP,MVC, JDBC (프로그래밍에 있어 어떤 구조를 만들어가는 방법론) 등을 지원<br><br>
- 오픈소스 경럅급 어플리케이션 프레임워크

### 주요 특징
- 크기와 부하의 측면에서 경량<br>
경량 컨테이너에로서 자바 객체를 직접 관리. 객체 생성, 소멸 같은 생명주기 관리.<br>
스프링으로부터 필요한 객체 얻어옴.<br><br>
- IOC(Inversion of Control)<br>
제어권의 역전, 제어권이 스프링 프레임워크에 있음. 개발자가 제어권을 가지지 않음.<br>
일반적으로 지금까지 프로그램은 객체 결저 및 생성 -> 의존성 객체 생성 -> 객체 내의 메소드 호출 하는 작업을 반복했다.<br>
이는 각 객체들이 프로그램의 흐름을 결정하고 각 객체를 구성하는 작업에 직접적으로 참여한 것이다.<bR>
즉, 모든 작업을 사용자가 제어하는 구조 인것이다.<br><br>
하지만 `IOC`에서는 이 흐름의 구조를 바꾼다. `IOC`에서의 객체는 자기가 사용할 객체를 선택하거나 생성하지 않는다.<br>
또한 자신이 어디서 만들어지고 어떻게 사용되는지 또한 모른다. 자신의 모든 권한을 다른 대상에 위임함으로써 제어권한을 위임받은 특별한 객체에 의해 결정되고 만들어진다.<br>
즉, 제어의 흐름을 사용자가 컨트롤하지 않고 위임한 특별한 객체에 모든 것을 맡기는 것이다.<br>
`IOC` 란 기존 사용자가 모든 작업을 제어하던 것을 특별한 객체에 모든 것을 위임하여 객체의 생성부터 생명주기등 모든 객체에 대한 제어권이 넘어 간 것을 IOC 제어의 역전이라고 한다. <br><br>
  - #### IOC 의 구성요소와 DI 와 DL
    - <B style="color:orange">`IOC`는 DI와 DL에 의해 구현된다.</b><br><br>
    - DL (Dependency Lookup)- 의존성 검색<bR>
    컨테이너에서는 객체들을 관리하기 위해 별도의 저장소에 빈을 저장하는데 저장소에 저장되어 있는 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색하는 방법이다.<br><br>
    - DI (Dependency Injection) - 의존성 주입<br>
    의존성 주입이란, 객체가 서로 의존하는 관계가 되게 의존성을 주입하는 것 입니다. <br>
    객체지향 프로그램에서 의존성 이란, 하나의 객체가 어떠한 다른 객체를 사용하고 있음을 의미한다. <bR>
    그렇다면 `IOC`에서의 `DI`는 무엇인가? <bR>
      <B style="color:orange"> 각 클래스 사이에 필요로 하는 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것</B><br><br>
- DI(Dependency Injection)<br>
의존성 주입, 계층이나 서비스 간에 의존성이 존재할 경우 스프링 프레임워크가 서로 연결<br><br>
- AOP(Aspect-Oriented Programming)<br>
관점지향 프로그래밍. 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 사용.<br>
대부분 소프트웨어 갭라 프로세스에서 사용하는 방법은 OOP(Object Oriented Programming)이다.<br>
OOP는 객체지향 원칙에 따라 관심사가 같은 데이터를 한곳에 모아 분리하고 낮은 결합도를 갖게하여 독립적이고 유연한 모듈로 캡슐화를 하는 것을 일컫는다.<br>
하지만 이러한 과정 중 중복된 코드들이 많아지고 가독성, 확장성, 유지보수성을 떨어뜨린다. <br>
이러한 문제를 보완하기에 나온 것이 `AOP`이다<br>
AOP에서는 핵심기능과 공통기능을 분리시켜 핵심 로직에 영향을 끼치지 않게 공통기능을 끼워 넣는 개발형태이며 이렇게 개발함에 따라 <br><br>
" 무분별하게 중복되는 코드를 한곳에 모아 중복되는 코드를 제거할 수 있어지고 공통기능을 한 곳에 보관함으로써 공통 기능 하나의 수정으로 모든 핵심기능들의 공통기능을 수정할 수 있어 효율적인 유지보수가 가능하며 재활용성이 극대화 "된다.<br><br>
물론 AOP로 만들 수 있는 기능은 OOP로 구현할 수 있는 기능이지만, `Spring`에서는 AOP를 편리하게 사용할 수 있도록 이를 지원하고 있다.<bR><bR>

<br><br>
- POJO (Plain OLd Java Object)<br>
다른 클래스를 상속받아 만들 필요 없는 자바 클래스<br>
말 그대로 평범한 자바 오브젝트이다.<br>
이전 `EJB`(Enterprise JavaBeans)는 확장 가능한 재사용이 가능한 로직을 개발하기 위해 사용 되었었는데, <br>
`EJB`는 한가지 기능을 위해 불필요한 복잡한 로직이 과도하게 들어가는 단점이 있었다.<br>
그래서 다시 조명을 받은게 `POJO`이다. `POJO`는 `getter/setter`를 가진 단순한 자바오브젝트를 정의를 하고 있습니다.<br>
이러한 단순 오브젝트는 의존성이 없고 추후 테스트 및 유지보수가 편리하다는 유연성의 장점을 가진다.<br>
이러한 장점들로 인해 객체지향적인 다양한 설계와 구현이 가능해지고 `POJO`의 기반의 `Framework`가 조명을 받고 있다.<br>
"POJO를 사용함으로써, 당신의 코드는 더욱 심플해졌고, 그로인해 테스트하기에 더 좋으며, 더 유연하고 요구사항에 따라 기술적 선택을 바꿀 수 있게되었다. "<br><br>
- MVC (Model2)
  - ![img_4.png](img_4.png) <br><br>
  - MVC란 (Model View Controller) 구조로 사용자 인터페이스와 비지니스 로직을 분리하여 개발하는 것이다.<br>
  MVC에서는 Model1과 Model2로 나누어져 있으며 일반적인 MVC는 Model2를 지칭한다.<br><br>
  - Model
    - Model에서는 데이터처리를 담당하는 부분이다. Model부분은 Service 영역과 DAO 영역으로 나뉘어지고 여기서 중요한것은 Service 부분은 불필요하게 HTTP통신을 하지 않아야 하고
    Request나 Response와 같은 객체를 매개변수로 받아선 안된다. 또한 Model 부분의 Service는 view에 종속적인 코드가 없어야 하고 View부분이 변경되더라도 Service부분은 그대로 재사용 할 수 있어야한다.<bR>
    <b Style="Color:orange">Model 에서는 View와 Controller 어떠한 정보도 가지고 있어서는 안된다. </b><br><br>
  - View
    - View는 사용자 Interface를 담당하며 사용자에게 보여지는 부분이다. View는 Controller를 통해 모델에 데이터에 대한 시각화를 담당하며 View는 자신이 요청을 보낼 Controller의 정보만 알고 있어야 하는 것이 핵심이다.
    - <b Style="Color:orange"> Model이 가지고 있는 정보를 저장해서는 안되며, Model, Controller의 구성요소를 알아서도 안된다.</b><br><br>
  - Controller
    - Controller에서는 View에 받은 요청을 가공하여 Model(Service영역)에 이를 전달한다. 또한 Model로 부터 받은 결과를 View로 넘겨주는 역할을 한다.<br>
    - Controller에서는 모든 요청 에러와 모델에러를 처리하며 View와 Controller의 정보를 알고 있어야한다.<br>
    - <b Style="Color:orange">Model과 View정보에 대해 알고 있어야 한다.</b><br><br>
  - 이렇게 Model, View, Controller를 나누는 이유는 소스를 분리함으로서 각 소스의 목적이 명확해지고 유지보수 하는데에 용이하다.<br>
  Model의 Service영역은 잣니을 어떠한 Controller가 호출하든 상관없이 정해진 매개변수만 받는다면 자신의 비즈니스 로직을 처리할 수 있어야 한다.<br><br>
  이 말은 View의 정보가 달라지더라도 `Controller`에서 `Service`에 넘겨줄 매개변수 데이터 가공만 처리하면 되기 때문에 유지보수 비용을 절감할 수 있는 효과가 있다.<br>
  또한, `Service`영역의 재사용이 용이하기 대문에 확장성 부분에서도 큰 효과를 볼 수 있는 장점이 있다.
- 영속성과 관련된 다양한 서비스 지원<br>
`iBatis`, `Hibernate` 등 데이터베이스 처리 라이브러리와 연결할 수 있는 인터페이스 제공<br><br>
- 확장성이 높음<br><br>
### SpringFramwork 구조
![img_3.png](img_3.png)
- Spring Core
  - 'Spring Core' 는 `Spring Container` 를 의미한다. `core` 라는 말 그대로 `Container` 는 `Spring Framewrok`의 핵심이며,
  그 중에서도 핵심은 `Bean Factory Container` 이다.  그 이유는 바로 `Bean Factory`는 `IOC` 패턴을 적용하여 객체의 구성 부터 의존성 처리까지 모든 일을 처리하는 역할을 하고 있기 때문이다.<br><br>
- Spring Context
  - `Spring Context`는 `Spring Framework`의 `context` 정보들을 제공하는 설정 파일이다. `Spring Context`에는 `JNDI`, `EJB`, Validation`, `Scheduling`, `Internalization` 등 엔터프라이즈 서비스들을 포함하고 있다.<bR><br>
- Spring AOP
  - `Spring AOP module`은 `Spring Framework`에서 관점지향 프로그래밍을 할 수 있고 `AOP` 를 적용할 수 있게 도와주는 `Module`이다.<br>
  해당 `AOP`에 대한 내용은 위에서 설명하였다.<br><br>
- Spring DAO
  - `DAO`란, `Data Access Object`의 약자로 `Database Data`에 접근하는 객체이다. `Spring JDBC DAO`는 추상 레이어를 지원함으로써 코딩이나 예외처리 하는 부분을 간편화 시켜 일관돤 방법으로 코드를 짤 수 있게 도와준다.<br><br>
- Spring ORM
  - `ORM`이란, `Object Relatonal Mapping`의 약자로 간단하게 객체와의 관계 설정을 하는 것이다.<br>
  `Spring` 에서는 `Ibatis`, `Hibernate`, `JDO` 등 인기 있는 객체 관계형 도구 (`OR`도구)를 사용할 수 있도록 지원한다.<br><br>
- Spring Web
  - `Spring`에서 `Web context module`은 `Application module`에 내장되어 있고, `Web`기반의 응용프로그램에 대한 `Context`를 제공하여 일반적인 `Web Application` 개발에 필요한 기본적인 기능을 지원한다.<br>
  그로인해 `Jakarta Structs`와의 통합을 지원한다.<br><br>
- Spring MVC
  - `Spring`에서는 `MVC` 에서는 `Model2` 구조로 `Application`을 만들 수 있도록 지원한다.<br><br> `MVC( Model-View-Controller`) 프레임 워크는 웹 응용 프로그램을 작성하기 위한 완전한 기능을 갖춘 `MVC`를 구현한다.<br>
  `MVC`프레임 워크는 전략 인터페이스를 통해 고급 구성이 가능하며, JSP, Velocity, Tiles,i TExt 및 POI를 포함한 수많은 뷰 기술을 지원 하고 있다.

### Spring 흐름
- MVC - Model View Controller : 사용자가 인터페이스와 비지니스 로직을 분리하여 개발<br>
- ![img_5.png](img_5.png)
- 사용자로부터 request => DispatcherServlet => HandlerMapping을 통해 Controller 연결=><br>
Service호출 => DAO를 통해 DBD에서 데이터 가져오. => ModelAndViw 객체에 담아-> DispatcherServlet 으로 전달 -> ViewResolver 를 통해 View 와 연결하여 출력.
- Spring Request Life Cycle (요청 생명 주기 ) - 동작 개념 
  1.사용자로부터 요청이 들어오면 가장 먼저 DispatcherServlet이 반응한다.( 이 부분은 다양하게 상호작용 하는 부분이 많다.)
  2. Controller에 연결되기 위해서 `HandlerMapping`을 참조하고 `Controller`로 넘어간 요청은 `Service`를 호출하여 필요한 데이터들을 `DAO`를 통해 `DB`에서 끄집어 온다.<br><br>
  3. 끄집어 온 데이터들을 `ModelAndView`라는 객체에 담아 다시 DispatcherServlet에 반환한다.<br>
  4. `ViewReslover`를 통해서 비로소 `View`와 연결되고 사용자에게 출력되는 것이다.
- 그림에서 보이듯이 스프링은 사용자의 요청이 여러 단계를 거치는데 이 과정들을 다 만들어주다보면 클래스명이라던지 메소드 명이 헷갈릴 수 있다,
- 그렇기 떄문에 헷갈리지 않기 위해서는 `Naming` 규칙이 정말 중요하다.