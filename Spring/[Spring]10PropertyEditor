# [Spring]
## 데이터 바인딩 - PropertyEditor

### 데이터 바인딩이란?
- 어떤 `property` 의 값을 타겟 객체에 설정하는 기능.<br><br>
- 즉, 사용자가 입력한 값을 어플리케이션 도메인 객체에 동적으로 할당하는 기능이다.<br><br>
- 사용자는 주로 문자열을 입력하는데, `int`형으로 받아야 할 수도 있고,<br>
`Date`나 객체 그 자체로 받아야하는 경우도 있는데, 그 문자열을 객체가 가지고 있는 다양한 `property`타입으로 변환해주는 기능이다.<br><br>
- `DataBinder`라는 인터페이스를 사용한다.

### PropertyEditor
```java
package com.basic.applicationContext;

public class Event {

    Integer id;

    String title; // 비어있으면 안됨.
    
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Override
    public String toString() {
        return "Event{" +
                "id=" + id +
                ", title='" + title + '\'' +
                '}';
    }
}
```
<br>

`EventController`에서 요청을 받아 데이터를 받을 수 있다.<bR><br>
```java
package com.basic.applicationContext;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EventController {

    //event/1
    //event/2
    //이런식으로 요청이 들어오면 입력한 숫자를 Event 타입으로 변환하여 스프링이 받는다.
    @GetMapping("/event/{event}")
    public String getEvent(@PathVariable Event event){ //@PathVariable로 Event를 도메인으로 받음.
        System.out.println(event);
        return event.getId().toString();
    }
}
```
<br>

요청이 문자열로 오기 때문에 `"event/1"` 뒤의 '1'부분을 `Integer`형으로 바꿔주어야한다.<br><br>
그 작업을 하기 위해, `PropertyEditor` 를 사용한다.<br><br>
`PropertyEditorSupport`를 상속받는 객체를 만들어준다. 필요한 메서드를 구현해주면 되는데,<br>
문자열을 `Integer`로 바꿔주는 구현은 `setAsText`메서드에서 해준다.
```java
package com.basic.applicationContext;

import java.beans.PropertyEditorSupport;

public class EventEditor extends PropertyEditorSupport {

    //Value라는 것은 PropertyEditor가 가지고 있는 값
    //이 값이 서로 다른 쓰레드에 공유가 됨 -> Stateful -> 쓰레드 safe하지 않음
    // -> 여러 쓰레드에 공유해서 사용하면 안된다 (Bean으로 등록해서 사용하면 안된다)


    @Override
    public String getAsText() {
        Event event = (Event) getValue();
        return event.getId().toString();
    }

    @Override
    public void setAsText(String text) throws IllegalArgumentException {
        setValue(new Event(Integer.parseInt(text)));
    }
}
```
<b style="color:orange">`PropertyEditor`가 가지고 있는 값은 서로 다른 쓰레드에 공유가 될 수 있다.</b> 
<br>따라서 `stateful`하기 때문에 쓰레드 `safe`하지 않는다.
<details><summary>Stateful 과 Stateless 의 차이</summary>

#### `HTTP`엔 여러 특징이 있는데 그 중 중요한 특징으로 `무상태(Stateless)가 있다.
이 무상태라는 특징은 무엇인가? <br>그리고 무상태 특징을 왜 사용하는가? 에 대해서 알아보도록 한다.
- 무상태(Stateless)
  - 클라이언트와 서버 관계에서 서버가 클라이언트의 상태를 보존하지 않음을 의미한다.
    - 장점 : 서버의 확장성이 높기 때문에 대량의 트래픽 발생 시에도 대처를 수월하게 할 수 있다.
    - 단점 : 클라이언트의 요청에 상대적으로 `Stateful` 보다 더 많은 데이터가 소모된다.
- #### 상태 유지 ? 무상태?
  - <b>무상태</b> 단어 그대로 생각해보면 "상태가 없는 것" 이다.<br>
  그 반대의 경우 "상태가 있는 것" 이라 생각할 수 있으며 이는 <b>상태 유지(stateful)</b>이라 한다. <br>
  무상태를 이해하기 위해 우선 상태가 있는 경우를 먼저 살펴보도록 하자.<br><br>
  
#### 상태유지
- 상태유지라 함은 클라이언트와 서버 관계에서 서버가 클라이언트의 상태를 보존함을 의미한다.<br><br>
단순히 말하면 클라이언트의 이전 요청이 서버에 전달되었을 때, 클라이언트의 다음 요청이 이전 요청과 관계가 이어지는 것을 의미한다.<br><br>
단순히 말하자곤 했지만, 이렇게 봐도 무슨 말인지 이해하기 어려우니 예시를 보자.<br><br>
- 자전거 판매를 하는 서버 X
- 자전거 사려는 클라이언트 A<br><br>
서버와 클라이언트가 다음과 같이 준비되어있고 클라이언트가 자전거를 사기 위해 클라이언트가 서버에게 자전거 부품을 단계별로 커스텀을하여 요청을 하는 상황이다.<br>
서로간의 대화는 다음과 같이 진행된다.<br>
------
A : 자전거 사려합니다.<br>
X : 자전거 커스텀 재료를 골라주세요.  <b><u> ( 자전거를 사려한다는 것을 기억한다. )</u></b><br><br>
A : 휠은 검정색, 핸들은 검정색, 바디는 흰색, 안장은 흰색으로 해주세요.<br>
X : 배송은 어디로 해드릴까요 ? <b><u>( 자전거를 사려 했다는 것을 기억하고 있다,)</u></b><br><br>
A : 집으로 보내주세요.
X : 결제는 무엇으로 해드릴까요 ? <b><u> ( 자전거를 사려했다는 것, 커스텀을 어떻게 하겠다는 것인지 알고 있다.)</u></b><br><bR>

A : 카드로 결제할게요.
B : 결제 완료 되었습니다. <u><b>(위의 사용자가 요구했던 모든 사항을 기억하고 있다.)</u></b><br>
-------
- 대화를 보면 판매하는 X서버는 사용자의 이전 요청을 모두 기억하며 진행한다는 것을 알 수 있다.<br><br>
- 이것이 상태 유지이며 지극히 정상적인 대화 처럼보인다. <br>
하지만 여기엔 함정이 있다.<br><br>
- 바로 판매하는 서버 X가 바뀔 경우다.<br>
- 만약 대량의 트래픽이 몰려들어서 서버를 긴급하게 늘렸다고 가정해보자.<br><br>
- 그러면 판매자 서버 X가 아닌 증가된 어떤 서버 Y가 될수도 있다. <br><bR>
- 현실에서도 마트에서 너무 바쁘면 담당자가 바뀌기도 하지 않은가? 같은 의미로 생각할 수 있다.<br>
- 같은 의미로 생각할 수 있다. <br><br>
- 다음은  X가 바뀌었을 경우의 상황이다.
-------
A : 자전거 사려합니다.<bR>
X : 자전거 커스텀 재료를 골라주세요.<br><br>

A : 휠은 검정색, 핸들은 검정색, 바디는 흰색, 안장은 흰색으로 해주세요.
Y : 네? 어떤걸 말씀하시는거죠?<br><br>
A : 집으로 보내주세요.<br>
Z : ?<br><br>
A : 카드로 결제할게요.<br>
X : 네?<br>
-----------
말이 통하지 않는다. 이게 바로 상태 유지의 문제이다. 이러한 문제를 해결하기 위해 무상태가 등장한다.<br><br>

#### 무상태

-------------
- 상태 유지를 이해했다면, 무상태는 생각보다 쉽게 이해할 수 있다. 바로 무상태의 예를 들어보도록 하자.<br>
- 위와 같은 상황을 가정한다.<br><br>
- 자전거 판매를 하는 서버 X, 대체 가능한 서버 Y,Z<br>
- 자전거를 사려는 클라이언트 A<br><br>
----------------
A : 자전거 사려합니다.<br>
X : 자전거 커스텀 재료를 골라주세요. <b><u>서버는 아무것도 기억하지 않는다.</u></b>
<br><bR>
A : 자전거를 사려합니다. 휠은 검정색, 핸들은 검정색, 바디는 흰색, 안장은 흰색으로 해주세요.<br>
Y : 배송은 어디로 해드릴까요 ? <b><u>서버는 아무것도 기억하지 않는다.</u></b>
<br><br>
A : 자전거를 사려합니다. 휠은 검정색, 핸들은 검정색, 바디는 흰색, 안장은 흰색으로 해주세요. 배송은 집으로 보내주세요<br>
Y : 결제는 무엇으로 해드릴까요?  <b><u>서버는 아무것도 기억하지 않는다.</u></b>
<br><br>
A : 자전거를 사려합니다. 휠은 검정색, 핸들은 검정색, 바디는 흰색, 안장은 흰색으로 해주세요. 배송은 집으로 보내주세요. 결제는 카드로 할게요.<br>
Y : 결제 완료 되었습니다.  <b><u>서버는 들어온 요청을 처리한다.</u></b>
-------------
이 대화에서 아마 손뼉을 치는 사람이 있을 것이다. 이게 바로 무상태이다. <bR>
이전의 클라이언트의 요청(상태)을 유지하지 않는 서버.<br>
그것이 핵심이다.<br>
무상태는 기존의 서버가 혼잡해져서 새로운 서버를 가져다 놓아도 기존의 비즈니스 로직을 그대로 구현하고 있다면 이전의 사용자 요청이 어떤지에 관계 없이 계속 일을 처리할 수 있다.<br>
단점은 클라이언트가 클라이언트가 하고자하는 최종 목적을 위해 지나는 과정마다 점점 전달해야하는 내용이 많아진다는 것이다.<br><br>
`HTTP`는 이 무상태를 특징으로 기본적으로 가지고 있다. <bR>
특별한 일이 없다면 무상태를 지향해야하며 정말 필요한 경우에만 상태 유지를 해야한다.
</details>
즉, <b style="color:orange"> 여러 쓰레드에 공유해서 사용하면 안된다.(`Bean`으로 등록해서 사용하면 안된다)</b><br>
`Bean`으로 등록해서 사용하면, 1번 회원이 2번 회원 정보를 수정하는 등 심각한 문제가 생길 수 있다.<br><br>
만들어준 `Editor`를 사용하기 위해 위에서 만들어줬던 `Controller`에 `@InitBinder` 어노테이션을 사용하여 컨트롤러에서 사용할 `Binder`를 등록해줘야 한다.

```java
package com.basic.applicationContext;

import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EventController {
    
    @InitBinder // 컨트롤러에서 사용할 바인더 등록
    public void init(WebDataBinder webDataBinder){
        // WebDataBinder에 Event 클래스 타입을 처리할 PropertyEditor 등록
        // WebDataBinder에 DataBinder의 구현체 중 하나
        webDataBinder.registerCustomEditor(Event.class,new EventEditor());

    }

    //event/1
    //event/2
    //이런식으로 요청이 들어오면 입력한 숫자를 Event 타입으로 변환하여 스프링이 받는다.
    @GetMapping("/event/{event}")
    public String getEvent(@PathVariable Event event){ //@PathVariable로 Event를 도메인으로 받음.
        System.out.println(event);
        return event.getId().toString();
    }
}
```
<br>
실행 시키면, 컨트롤러가 어떤 요청을 처리하기 전에 컨트롤러에서 정의한 데이터바인더에 들어있는 `PropertyEditor`를 사용해준다.